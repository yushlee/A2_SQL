-- 利用WHERE的方式JOIN
SELECT G.*, S.* 
FROM GEOGRAPHY G, STORE_INFORMATION S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 內部連接 (INNER JOIN)
-- INNER JOIN TABLE ON COLUMN
-- INNER可省略不寫
SELECT G.*, S.* 
FROM GEOGRAPHY G INNER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


-- 左外部連接(LEFT JOIN or LEFT OUTER JOIN)
-- OUTER可省略不寫
SELECT G.*, S.* 
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


-- 右外部連接 (RIGHT JOIN or RIGHT OUTER JOIN)
SELECT G.*, S.* 
FROM GEOGRAPHY G RIGHT OUTER JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 全外部連接 (FULL JOIN or FULL OUTER JOIN)
-- MySQL不支援FULL JOIN
/*
SELECT G.*, S.* 
FROM GEOGRAPHY G FULL JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;
*/

-- LEFT JOIN - INNER JOIN
SELECT G.*, S.* 
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL;


-- RIGHT JOIN - INNER JOIN
SELECT G.*, S.* 
FROM GEOGRAPHY G RIGHT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL;


-- FULL JOIN - INNER JOIN
/*
SELECT G.*, S.* 
FROM GEOGRAPHY G FULL JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL
OR S.GEOGRAPHY_ID IS NULL;
*/

-- 由不同欄位獲得的資料串連在一起
SELECT CONCAT(STORE_ID, '-', STORE_NAME, '-', SALES)
FROM STORE_INFORMATION;

-- SUBSTRING 子字串
-- substring函數是用來抓出一個欄位資料中的其中一部分
SELECT STORE_NAME, SUBSTRING(STORE_NAME, 2), SUBSTRING(STORE_NAME, 2, 3)
FROM STORE_INFORMATION;


SELECT STORE_ID, STORE_NAME, LTRIM(STORE_NAME), RTRIM(STORE_NAME)
FROM STORE_INFORMATION;


-- TRIM([[位置] [要移除的字串] FROM ] 字串)
-- [位置] 的可能值為 LEADING (起頭), TRAILING (結尾), or BOTH (起頭及結尾)
SELECT STORE_ID, STORE_NAME,
    TRIM(LEADING 'Bos' FROM STORE_NAME),
    TRIM(TRAILING 's' FROM STORE_NAME),
    TRIM(BOTH 'L' FROM STORE_NAME)
FROM STORE_INFORMATION;

-- SQL 練習題(二)
-- 計算和統計「個別商店」的以下三項資料：
-- 「總合營業額」、「商店資料個數」、「平均營業額」
-- 搜尋或排除條件如下：
-- 排除「平均營業額」1000(含)以下的商店資料
-- 排除「商店資料個數」1(含)個以下的商店資料
-- 依照「平均營業額」由大至小排序
-- PS:使用別名語法簡化「表格名稱」及查詢結果「欄位名稱」
SELECT STORE_NAME, SUM(SALES) "SUM_SALES", 
	COUNT(STORE_ID) "COUNT_STORE", AVG(SALES) "AVG_SALES"
FROM STORE_INFORMATION
GROUP BY STORE_NAME
HAVING AVG(SALES) > 1000
AND COUNT(STORE_ID) > 1
ORDER BY AVG(SALES) DESC;


-- SQL 練習題(3-1)
-- 查詢各區域的營業額總計
-- 資料結果依營業額總計由大到小排序
-- (不論該區域底下是否有所屬商店)
-- FROM GEOGRAPHY G FULL JOIN STORE_INFORMATION S
SELECT G.REGION_NAME, IFNULL(SUM(S.SALES), 0)
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
GROUP BY G.REGION_NAME
ORDER BY SUM(S.SALES) DESC;

-- Oracle NVL
-- MS SQL ISNULL
-- MySQL
SELECT IFNULL(NULL, 'VALUE');

-- SQL 練習題(3-2)
-- 查詢各區域的商店個數
-- 資料結果依區域的商店個數由大至小排序
-- (依據商店名稱,不包含重覆的商店)
-- (不論該區域底下是否有所屬商店)
SELECT G.REGION_NAME, COUNT(DISTINCT S.STORE_NAME) "STORE_COUNT"
FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
GROUP BY G.REGION_NAME
ORDER BY COUNT(DISTINCT S.STORE_NAME) DESC;

/*
NUMBER( P, S )
P：表示數字總共的位數
S：表示小數的位數

NUMBER(5, 2)
表示數值共5位數(包含固定最多2位小數、故整數位最多只能為3碼數字)
小數點第3位自動進位至第2位
123.455 → 123.46

NUMBER( 5, -2)
表示數值共5位「整數」-2表示數值自動進位至百位數
12355 → 12400
*/






